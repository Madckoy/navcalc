// üß≠ BotNavigationPlannerWrapper.java
// @Generated by ChatGPT ‚Äî –ü—É—Ç–µ–≤–æ–¥–Ω–∞—è –Ω–∏—Ç—å –ª–æ–≥–∏–∫–∏ –∏ —Ä–∞–∑–≤–µ–¥–∫–∏ üòé

package com.devone.bot.core.navigation;

import com.devone.bot.core.navigation.BotExplorationTargetPlanner.Strategy;
import com.devone.bot.utils.BotBlockData;
import com.devone.bot.utils.BotCoordinate3D;

import java.util.List;

public class BotNavigationPlannerWrapper {

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥: –≤—ã–±–∏—Ä–∞–µ—Ç —Ü–µ–ª–∏ —Ä–∞–∑–≤–µ–¥–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã—Ö —Ç–æ—á–µ–∫.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é EVEN_DISTRIBUTED, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π scanRadius –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç.
     *
     * @param botPosition - —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –±–æ—Ç–∞
     * @param reachable - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–∏–º—ã—Ö —Ç–æ—á–µ–∫
     * @param sectorCount - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—Ç–æ—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 24)
     * @param maxTargets - –º–∞–∫—Å–∏–º—É–º —Ç–æ—á–µ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
     * @return —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–≤—ã—Ö —Ç–æ—á–µ–∫ –∏–ª–∏ null, –µ—Å–ª–∏ —Ü–µ–ª–µ–π –Ω–µ—Ç
     */
    public static List<BotBlockData> getNextExplorationTargets(BotCoordinate3D botPosition,
                                                                List<BotBlockData> reachable,
                                                                int sectorCount,
                                                                int maxTargets) {
        if (reachable == null || reachable.isEmpty()) return null;

        int scanRadius = estimateSafeScanRadius(botPosition, reachable, 10); // –∞–≤—Ç–æ-–æ—Ü–µ–Ω–∫–∞, —Å –¥–µ—Ñ–æ–ª—Ç–æ–º

        List<BotBlockData> targets = BotExplorationTargetPlanner.selectTargets(
                botPosition,
                reachable,
                Strategy.EVEN_DISTRIBUTED,
                sectorCount,
                maxTargets,
                true,       // –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –¥–∞–ª—å–Ω–∏–µ
                scanRadius  // —Ä–∞–¥–∏—É—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        );

        return (targets == null || targets.isEmpty()) ? null : targets;
    }

    /**
     * –†–∞—Å—á—ë—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–∞–¥–∏—É—Å–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–¥–∞–ª—ë–Ω–Ω–æ–π —Ç–æ—á–∫–∏.
     */
    private static int estimateSafeScanRadius(BotCoordinate3D bot, List<BotBlockData> reachable, int defaultRadius) {
        double maxDistSq = 0;
        for (BotBlockData b : reachable) {
            double dx = b.x - bot.x;
            double dy = b.y - bot.y;
            double dz = b.z - bot.z;
            double distSq = dx * dx + dy * dy + dz * dz;
            if (distSq > maxDistSq) {
                maxDistSq = distSq;
            }
        }
        return Math.max(2, (int) Math.sqrt(maxDistSq));
    }
}
